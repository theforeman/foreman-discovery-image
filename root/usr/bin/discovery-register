#!/usr/bin/ruby
#
# vim: ts=2:sw=2:et
#
# Copyright (C) 2012-2014 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.  A copy of the GNU General Public License is
# also available at http://www.gnu.org/copyleft/gpl.html.

PROXY_CACHE = '/tmp/proxy_cache'

require 'fileutils'
require 'net/http'
require 'net/https'
require 'uri'
require 'socket'
require 'resolv'

# For comparison
require 'rubygems'
require 'facter'
require 'yaml'
require 'json'

# Our lib
require 'discovery'

def write_cache(data)
  File.open(PROXY_CACHE, 'w') {|f| f.write(data) }
end

def read_cache
  File.read(PROXY_CACHE)
rescue => _
  "empty cache"
end

def clear_cache
  File.unlink(PROXY_CACHE) if File.exists?(PROXY_CACHE)
end

Signal.trap("HUP") do
  Facter.clear
end

# Script was (re)started - delete old data
clear_cache

log_msg "Some interesting facts about this system:"
facts = Hash[Facter.to_hash.select {|k,v| k =~ /address|hardware|manufacturer|productname|memorytotal/}]
facts.keys.sort.each {|k| log_msg " #{k}: #{facts[k]}"}

# check every 15 minutes but only upload on changes
upload_sleep = cmdline("fdi.uploadsleep", 60 * 15).to_i rescue (60 * 15)
extra_initial_uploads = cmdline("fdi.cachefacts", 0).to_i rescue 0
while true do
  uninteresting_facts=/kernel|operatingsystem|osfamily|ruby|path|time|swap|free|filesystem|version|selinux/i
  # force facter to do new system scan (we default to 15 minute intervals which is safe)
  Facter.clear
  facts = Facter.to_hash.reject! {|k,v| k =~ uninteresting_facts }
  unless YAML.load(read_cache) == facts
    log_msg "Fact cache invalid, reloading to foreman"
    write_cache(YAML.dump(facts)) if upload
  else
    log_msg "No change in facts (next check in #{upload_sleep} seconds)"
  end
  sleep upload_sleep
  if extra_initial_uploads > 0
    log_msg "Performing extra initial fact upload as defined by fdi.cachefacts (#{i} left)"
    clear_cache
    extra_initial_uploads -= 1
  end
end
